<?php
/**
 * Hyvä Themes - https://hyva.io
 * Copyright © Hyvä Themes 2020-present. All rights reserved.
 * This product is licensed per Magento install
 * See https://hyva.io/license
 */

use Hyva\Theme\Model\ViewModelRegistry;
use Hyva\Theme\ViewModel\HeroiconsSolid;
use Hyva\Theme\ViewModel\Navigation;
use Magento\Framework\View\Element\Template;
use Magento\Framework\Escaper;

/** @var Template $block */
/** @var Escaper $escaper */
/** @var ViewModelRegistry $viewModels */

// phpcs:disable Generic.Files.LineLength.TooLong

/** @var Navigation $viewModelNavigation */
$viewModelNavigation = $viewModels->require(Navigation::class, $block);

/** @var HeroiconsSolid $heroiconsSolid */
$heroiconsSolid = $viewModels->require(HeroiconsSolid::class);

$uniqueId = '_' . uniqid();
$maxLevel = $block->getmaxLevel() ?: 3;
$canOpenOnHover = $block->getOpenTopLevelMenuOnHover();
$topMenuCtaItem = $block->getTopMenuCtaItem();

// Order is important here: 1. build the menu data, 2. then set the cache tags from the view model identities
$menu = $viewModelNavigation->getNavigation(2 + $maxLevel);
$block->setData('cache_tags', $viewModelNavigation->getIdentities());
?>

<nav
    class="navigation relative hidden lg:block grow"
    aria-label="<?= $escaper->escapeHtmlAttr(__('Main menu')) ?>"
    x-data="initMenuDesktop<?= $escaper->escapeHtml($uniqueId) ?>()"
    x-ref="nav-desktop"
    @load.window="setActiveMenu($root)"
>
    <ul class="flex flex-wrap gap-x-8">
        <?php foreach ($menu as $item): ?>
            <?php if (!empty($item['childData'])): ?>
                <li
                    class="level-0"
                    x-data="{
                        open: false,
                        canHover(func) {
                            const isHoverableDevice = window.matchMedia('(hover: hover) and (pointer: fine)').matches;
                            if (!isHoverableDevice) return;
                            func();
                        }
                    }"
                    @click.outside="open = false"
                    <?php if ($canOpenOnHover): ?>
                    @mouseenter="canHover(() => { open = true })"
                    @mouseleave="canHover(() => { open = false })"
                    <?php endif ?>
                    @keydown.escape="open = false"
                >
                    <button
                        type="button"
                        class="level-0 group w-full flex justify-between items-center gap-1 pt-4 pb-[calc(theme(padding.4)_-_3px)]
                            border-b-[3px] border-transparent hover:border-blue-500 transition
                            aria-expanded:text-blue-500 aria-expanded:border-blue-500 data-[has-current]:aria-expanded:border-blue-500
                            data-[has-current]:border-slate-400 data-[has-current]:hover:border-blue-500"
                        @click="open = !open"
                        aria-expanded="false"
                        :aria-expanded="open"
                        aria-controls="<?= $escaper->escapeHtml($item['id']) ?>-desktop-menu-panel"
                    >
                        <?= $escaper->escapeHtml($item['name']) ?>
                        <?= $heroiconsSolid->chevronDownHtml(
                            'transition group-aria-expanded:rotate-180 text-slate-400 group-aria-expanded:text-inherit',
                            24,
                            24,
                            ['aria-hidden' => 'true']
                        ) ?>
                    </button>
                    <div
                        id="<?= $escaper->escapeHtml($item['id']) ?>-desktop-menu-panel"
                        class="z-30 absolute top-full inset-x-0 flex flex-col min-h-64 border-t border-slate-100 rounded-b-md bg-white shadow-md overflow-auto"
                        x-show="open === true"
                        x-transition
                        x-cloak
                    >
                        <ul class="flex flex-col gap-1 py-2.5 px-2 w-72">
                            <li>
                                <a
                                    href="<?= $escaper->escapeUrl($item['url']) ?>"
                                    class="flex p-2 rounded-md hover:bg-slate-50 aria-[current=page]:font-medium"
                                ><?= $escaper->escapeHtml(__('See all %1', $item['name'])) ?></a>
                            </li>
                            <?php foreach ($item['childData'] as $subMenu): ?>
                                <?= $block->getLayout()->getBlock('topmenu_desktop_item')
                                    ->setItem($subMenu)
                                    ->setLevel(1)
                                    ->toHtml() ?>
                            <?php endforeach; ?>
                        </ul>
                    </div>
                </li>
            <?php else: ?>
                <li>
                    <a
                        href="<?= $escaper->escapeUrl($item['url']) ?>"
                        title="<?= $escaper->escapeHtmlAttr($item['name']) ?>"
                        class="level-0 flex pt-4 pb-[calc(theme(padding.4)_-_3px)] border-b-[3px] border-transparent hover:border-blue-500
                            aria-[current=page]:border-slate-400 aria-[current=page]:hover:border-blue-500
                            <?= $item['name'] === $topMenuCtaItem ? 'text-red-700' : '' ?>"
                    >
                        <?= $escaper->escapeHtml($item['name']) ?>
                    </a>
                </li>
            <?php endif; ?>
        <?php endforeach; ?>
    </ul>
</nav>
<script>
    const initMenuDesktop<?= $escaper->escapeHtml($uniqueId) ?> = () => {
        return {
            setActiveMenu(menuNode) {
                Array.from(menuNode.querySelectorAll('a')).filter(link => {
                    return link.href === window.location.href.split('?')[0];
                }).map(item => {
                    item.setAttribute('aria-current', 'page');

                    let menuLevelCount = 0;
                    while (menuLevelCount < <?= $maxLevel ?>) {
                        let selector = `.level-${menuLevelCount}`;
                        item.closest(selector)
                            && item.closest(selector).querySelector('button')
                            && item.closest(selector).querySelector('button').setAttribute('data-has-current', '');
                        menuLevelCount++;
                    }
                });
            }
        }
    }
</script>
